name: ASA Settings Apply

on:
  push:
    branches: [ main ]
    paths:
      - 'ASA/**/GameUserSettings.ini'
      - 'ASA/**/Game.ini'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: write

concurrency:
  group: asa-settings-apply-${{ github.run_id }}
  cancel-in-progress: false

env:
  # Short waits for testing; bump for prod
  WAIT_30M: "30"      # prod: 900
  WAIT_15M: "30"      # prod: 720
  WAIT_3M:  "30"      # prod: 180

  LOG_READY_TIMEOUT:  "600"
  RCON_READY_TIMEOUT: "1200"

jobs:
  build-matrix:
    # Skip if this push is the auto-merge from the compose workflow
    if: ${{ !contains(github.event.head_commit.message, '[auto-gus-sync]') }}
    runs-on: self-hosted
    outputs:
      matrix: ${{ steps.mk-matrix.outputs.matrix }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Compute changed ini files (range-aware)
        id: changed_range
        shell: bash
        run: |
          set -euo pipefail
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"
          if [ -z "${BEFORE}" ] || ! git cat-file -e "${BEFORE}^{commit}" 2>/dev/null; then
            BEFORE="$(git rev-parse HEAD~1)"
          fi
          git --no-pager diff --name-only "${BEFORE}" "${AFTER}" \
            -- 'ASA/**/GameUserSettings.ini' 'ASA/**/Game.ini' > changed.txt || true
          echo "Changed INI files:"
          cat changed.txt || true
          {
            echo "list<<EOF"
            cat changed.txt
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Build matrix from deploy/targets.json
        id: mk-matrix
        uses: actions/github-script@v7
        env:
          CHANGED_LIST: ${{ steps.changed_range.outputs.list }}
        with:
          script: |
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('deploy/targets.json','utf8'));
            const changed = (process.env.CHANGED_LIST || '')
              .split('\n').map(s => s.trim()).filter(Boolean);

            const picks = [];
            for (const t of manifest.targets) {
              const base = t.work_subdir.replace(/\/+$/,'');
              const gusPath  = `${base}/GameUserSettings.ini`;
              const gamePath = `${base}/Game.ini`;
              const apply_gus  = changed.includes(gusPath);
              const apply_game = changed.includes(gamePath);
              if (apply_gus || apply_game) {
                picks.push({ ...t, apply_gus, apply_game });
              }
            }
            const uniq = Object.values(Object.fromEntries(picks.map(t => [t.id, t])));
            core.info(`Changed files: ${changed.join(', ') || '(none)'}`);
            core.info(`Selected targets: ${uniq.map(t => `${t.id}[gus:${t.apply_gus}/game:${t.apply_game}]`).join(', ') || '(none)'}`);
            core.setOutput('matrix', JSON.stringify(uniq));

  apply:
    needs: build-matrix
    if: ${{ needs.build-matrix.outputs.matrix != '[]' }}
    runs-on: self-hosted
    environment:
      name: host-${{ matrix.ssh_host_secret }}

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.build-matrix.outputs.matrix) }}

    env:
      SSH_USER: ${{ secrets.ASA_SERVER_SSH_USER }}
      SSH_PORT: ${{ secrets.ASA_SERVER_PORT }}
      HOST: ${{ secrets[matrix.ssh_host_secret] }}
      WORK_DIR: ${{ secrets.WORK_DIR }}

      REPO_SUBDIR: ${{ matrix.work_subdir }}
      CNAME: ${{ matrix.container }}
      LIVE_WIN_DIR: /var/lib/docker/volumes/${{ matrix.volume }}/_data/ShooterGame/Saved/Config/WindowsServer
      APPLY_GUS: ${{ matrix.apply_gus }}
      APPLY_GAME: ${{ matrix.apply_game }}

    steps:
      - name: Mint GitHub App token
        id: app
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout (for host update)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ steps.app.outputs.token }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.ASA_SERVERS_PRIVATE_KEY }}

      # --- Drain & stop (same cadence you use elsewhere) ---
      - name: RCON 30m warning
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "sudo docker exec '$CNAME' asa-ctrl rcon --exec \"serverchat Server updating settings in 30 minutes\""

      - name: Wait 15m
        run: sleep ${{ env.WAIT_30M }}

      - name: RCON 15m warning
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "sudo docker exec '$CNAME' asa-ctrl rcon --exec \"serverchat Server updating settings in 15 minutes\""

      - name: Wait 12m
        run: sleep ${{ env.WAIT_15M }}

      - name: RCON 3m warning
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "sudo docker exec '$CNAME' asa-ctrl rcon --exec \"serverchat Server updating settings in 3 minutes. Final warning!\""

      - name: Wait 3m
        run: sleep ${{ env.WAIT_3M }}

      - name: Saveworld & shutdown announce
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "sudo docker exec '$CNAME' asa-ctrl rcon --exec \"serverchat Saving world and shutting down for settings update.\" && \
             sudo docker exec '$CNAME' asa-ctrl rcon --exec \"saveworld\""

      - name: Stop container
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "cd '$WORK_DIR/$REPO_SUBDIR' && sudo docker compose down"

      # --- Update host checkout to main (with GitHub App token) ---
      - name: Update host checkout to origin/main
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" << 'EOF'
          set -euo pipefail
          cd "${{ env.WORK_DIR }}/${{ env.REPO_SUBDIR }}"
          TOKEN='${{ steps.app.outputs.token }}'
          REPO_SLUG='${{ github.repository }}'
          REPO_URL="https://x-access-token:${TOKEN}@github.com/${REPO_SLUG}.git"
          GIT_TERMINAL_PROMPT=0 git fetch --no-tags --prune "$REPO_URL" main
          git reset --hard FETCH_HEAD
          EOF

      # --- Apply changed files only (no privilege/ownership changes) ---
      - name: Inject password & replace files in live volume
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" << 'EOF'
          set -euo pipefail
          cd "${{ env.WORK_DIR }}/${{ env.REPO_SUBDIR }}"
          LIVE="${{ env.LIVE_WIN_DIR }}"

          if [ "${{ env.APPLY_GUS }}" = "true" ]; then
            # Inject admin password placeholder and copy
            sed -i "s/\${SERVER_PASSWORD}/${{ secrets.ASA_ADMIN_SECRET }}/g" GameUserSettings.ini
            sudo rm -f "${LIVE}/GameUserSettings.ini" || true
            sudo cp GameUserSettings.ini "${LIVE}/"
          fi

          if [ "${{ env.APPLY_GAME }}" = "true" ]; then
            sudo rm -f "${LIVE}/Game.ini" || true
            sudo cp Game.ini "${LIVE}/"
          fi
          EOF

      - name: Start container
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "cd '$WORK_DIR/$REPO_SUBDIR' && sudo docker compose up -d"

      # --- Readiness gates (unchanged) ---
      - name: Wait for startup log ("Starting the ARK...")
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" << 'EOF'
          set -euo pipefail
          CNAME='${{ env.CNAME }}'
          end=$((SECONDS+${{ env.LOG_READY_TIMEOUT }}))
          until sudo docker logs --tail 500 "$CNAME" 2>&1 | grep -q "Starting the ARK: Survival Ascended dedicated server"; do
            if [ $SECONDS -gt $end ]; then
              echo "Timed out waiting for startup log." >&2
              sudo docker logs "$CNAME" --tail 200 >&2 || true
              exit 1
            fi
            sleep 5
          done
          echo "Startup log observed."
          EOF

      - name: Wait for RCON to respond
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" << 'EOF'
          set -euo pipefail
          CNAME='${{ env.CNAME }}'
          end=$((SECONDS+${{ env.RCON_READY_TIMEOUT }}))
          while :; do
            if sudo docker exec "$CNAME" asa-ctrl rcon --exec "listplayers" >/dev/null 2>&1 \
               || sudo docker exec "$CNAME" asa-ctrl rcon --exec "serverchat healthcheck" >/dev/null 2>&1; then
              echo "RCON is responsive."
              break
            fi
            if [ $SECONDS -gt $end ]; then
              echo "Timed out waiting for RCON readiness." >&2
              sudo docker logs "$CNAME" --tail 200 >&2 || true
              exit 1
            fi
            sleep 5
          done
          EOF

      # --- Auto-rerun on transient runner glitch (e.g., "Can't find action.yml" in post steps) ---
      - name: Auto-rerun on transient post-step failures
        if: failure() && github.run_attempt < 3
        env:
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          TOKEN: ${{ github.token }}
        run: |
          echo "Job failed on attempt ${{ github.run_attempt }}. Waiting 30s, then re-running this workflow..."
          sleep 30
          curl -sSL -X POST \
            -H "Authorization: Bearer ${TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${REPO}/actions/runs/${RUN_ID}/rerun" \
            || true
          echo "Re-run requested. This attempt will now finish."
