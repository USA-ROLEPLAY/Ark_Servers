name: ASA Cluster Compose Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'ASA/**/docker-compose.yaml'
  workflow_dispatch:

concurrency:
  # Allow overlaps across hosts, but isolate per-run so jobs aren't coalesced.
  group: asa-cluster-deploy-${{ github.run_id }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write

env:
  # Short waits for testing; bump for prod if desired
  WAIT_30M: "30"      # prod: 900
  WAIT_15M: "30"      # prod: 720
  WAIT_3M:  "30"      # prod: 180

  LOG_READY_TIMEOUT:  "600"    # 10m
  RCON_READY_TIMEOUT: "1200"   # 20m

jobs:
  build-matrix:
    runs-on: self-hosted
    outputs:
      matrix: ${{ steps.mk-matrix.outputs.matrix }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Changed files (compose only, JSON)
        id: changed
        uses: tj-actions/changed-files@v45
        with:
          files: |
            ASA/**/docker-compose.yaml
          json: true

      - name: Build matrix from deploy/targets.json
        id: mk-matrix
        uses: actions/github-script@v7
        env:
          CHANGED_JSON: ${{ steps.changed.outputs.all_changed_files_json }}
        with:
          script: |
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('deploy/targets.json','utf8'));
            const changed = JSON.parse(process.env.CHANGED_JSON || '[]'); // array of exact paths
            const picks = [];
            for (const t of manifest.targets) {
              const composePath = `${t.work_subdir.replace(/\/+$/,'')}/docker-compose.yaml`;
              if (changed.includes(composePath)) picks.push(t);
            }
            // de-dupe by id (paranoia)
            const uniq = Object.values(Object.fromEntries(picks.map(t => [t.id, t])));
            core.info(`Changed compose files: ${changed.join(', ') || '(none)'}`);
            core.info(`Selected maps: ${uniq.map(t => t.id).join(', ') || '(none)'}`);
            core.setOutput('matrix', JSON.stringify(uniq));

  deploy:
    needs: build-matrix
    if: ${{ needs.build-matrix.outputs.matrix != '[]' }}
    runs-on: self-hosted

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.build-matrix.outputs.matrix) }}

    # prevent two maps on the same physical host from colliding, but unique per run
    concurrency:
      group: asa-deploy-${{ matrix.ssh_host_secret }}-${{ github.run_id }}
      cancel-in-progress: false

    env:
      SSH_USER: ${{ secrets.ASA_SERVER_SSH_USER }}
      SSH_PORT: ${{ secrets.ASA_SERVER_PORT }}
      HOST: ${{ secrets[matrix.ssh_host_secret] }}
      WORK_DIR: ${{ secrets.WORK_DIR }}

      REPO_SUBDIR: ${{ matrix.work_subdir }}
      CNAME: ${{ matrix.container }}
      LIVE_WIN_DIR: /var/lib/docker/volumes/${{ matrix.volume }}/_data/ShooterGame/Saved/Config/WindowsServer
      REPO_INI_DIR: ${{ github.workspace }}/${{ matrix.work_subdir }}
      LIVE_TMP: live-${{ matrix.id }}

    steps:
      - name: Mint GitHub App token
        id: app
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout (for PR diffs)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ steps.app.outputs.token }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.ASA_SERVERS_PRIVATE_KEY }}

      # --- Drain & stop ---
      - name: RCON 30m warning
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "sudo docker exec '$CNAME' asa-ctrl rcon --exec \"serverchat Server restarting in 30 minutes for updates. Get somewhere safe.\""

      - name: Wait 15m
        run: sleep ${{ env.WAIT_30M }}

      - name: RCON 15m warning
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "sudo docker exec '$CNAME' asa-ctrl rcon --exec \"serverchat Server restarting in 15 minutes for updates. Get somewhere safe.\""

      - name: Wait 12m
        run: sleep ${{ env.WAIT_15M }}

      - name: RCON 3m warning
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "sudo docker exec '$CNAME' asa-ctrl rcon --exec \"serverchat Server restarting in 3 minutes for updates. Final Warning get somewhere safe.\""

      - name: Wait 3m
        run: sleep ${{ env.WAIT_3M }}

      - name: Saveworld & shutdown announce
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "sudo docker exec '$CNAME' asa-ctrl rcon --exec \"serverchat Saving world and shutting down for updates.\" && \
             sudo docker exec '$CNAME' asa-ctrl rcon --exec \"saveworld\""

      - name: Stop container
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "cd '$WORK_DIR/$REPO_SUBDIR' && sudo docker compose down"

      # --- Update on-host checkout (compose only) ---
      - name: Update host checkout to origin/main (compose changes)
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" << 'EOF'
          set -euo pipefail
          cd "${{ env.WORK_DIR }}/${{ env.REPO_SUBDIR }}"
          TOKEN='${{ steps.app.outputs.token }}'
          REPO_SLUG='${{ github.repository }}'
          REPO_URL="https://x-access-token:${TOKEN}@github.com/${REPO_SLUG}.git"
          GIT_TERMINAL_PROMPT=0 git fetch --no-tags --prune "$REPO_URL" main
          git reset --hard FETCH_HEAD
          EOF

      - name: Start container
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "cd '$WORK_DIR/$REPO_SUBDIR' && sudo docker compose up -d"

      # --- Readiness gates ---
      - name: Wait for startup log ("Starting the ARK...")
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" << 'EOF'
          set -euo pipefail
          CNAME='${{ env.CNAME }}'
          end=$((SECONDS+${{ env.LOG_READY_TIMEOUT }}))
          until sudo docker logs --tail 500 "$CNAME" 2>&1 | grep -q "Starting the ARK: Survival Ascended dedicated server"; do
            if [ $SECONDS -gt $end ]; then
              echo "Timed out waiting for startup log." >&2
              sudo docker logs "$CNAME" --tail 200 >&2 || true
              exit 1
            fi
            sleep 5
          done
          echo "Startup log observed."
          EOF

      - name: Wait for RCON to respond
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" << 'EOF'
          set -euo pipefail
          CNAME='${{ env.CNAME }}'
          end=$((SECONDS+${{ env.RCON_READY_TIMEOUT }}))
          while :; do
            if sudo docker exec "$CNAME" asa-ctrl rcon --exec "listplayers" >/dev/null 2>&1 \
               || sudo docker exec "$CNAME" asa-ctrl rcon --exec "serverchat healthcheck" >/dev/null 2>&1; then
              echo "RCON is responsive."
              break
            fi
            if [ $SECONDS -gt $end ]; then
              echo "Timed out waiting for RCON readiness." >&2
              sudo docker logs "$CNAME" --tail 200 >&2 || true
              exit 1
            fi
            sleep 5
          done
          EOF

      # --- Live -> repo PR (ONLY GameUserSettings.ini) ---
      - name: Fetch live GameUserSettings.ini (read-only mount)
        run: |
          mkdir -p "$LIVE_TMP"
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "sudo docker run --rm -v '${{ matrix.volume }}:/v:ro' alpine:3.19 \
             sh -c 'cat /v/ShooterGame/Saved/Config/WindowsServer/GameUserSettings.ini 2>/dev/null || true'" \
            > "$LIVE_TMP/GameUserSettings.ini" || true

      - name: Normalize line endings (LF) & strip BOM
        run: |
          norm() {
            f="$1"
            [ -f "$f" ] || return 0
            # strip CR, then strip UTF-8 BOM if present
            sed -i 's/\r$//' "$f" || true
            printf '%s' "$(tail -c +1 "$f")" > "$f" 2>/dev/null || true
            # explicit BOM strip (portable)
            perl -i -pe 's/^\x{FEFF}// if $.==1' "$f" 2>/dev/null || true
          }
          norm "$LIVE_TMP/GameUserSettings.ini"
          norm "$REPO_INI_DIR/GameUserSettings.ini"

      - name: Scrub admin password placeholder (do not commit secrets)
        run: |
          if [ -s "$LIVE_TMP/GameUserSettings.ini" ]; then
            sed -i 's|^ServerAdminPassword=.*$|ServerAdminPassword=\${SERVER_PASSWORD}|' "$LIVE_TMP/GameUserSettings.ini"
          fi

      - name: Diff & stage GameUserSettings.ini
        id: stage
        run: |
          set -euo pipefail
          mkdir -p "$REPO_INI_DIR"
          changed=0
          if [ -s "$LIVE_TMP/GameUserSettings.ini" ]; then
            if ! diff -q "$REPO_INI_DIR/GameUserSettings.ini" "$LIVE_TMP/GameUserSettings.ini" >/dev/null 2>&1; then
              cp "$LIVE_TMP/GameUserSettings.ini" "$REPO_INI_DIR/GameUserSettings.ini"
              echo "updated GameUserSettings.ini"
              changed=1
            fi
          fi
          echo "changed=$changed" >> "$GITHUB_OUTPUT"

      - name: Create PR with updated GameUserSettings.ini
        if: steps.stage.outputs.changed == '1'
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.app.outputs.token }}
          commit-message: "chore(${{ matrix.id }}): sync live GameUserSettings.ini -> repo"
          title: "Sync GameUserSettings.ini from live: ${{ matrix.id }}"
          body: |
            Syncing `GameUserSettings.ini` from the live server after restart.
            - Target: **${{ matrix.id }}**
          branch: chore/sync-gus/${{ matrix.id }}-${{ github.run_id }}
          delete-branch: true
          add-paths: |
            ${{ matrix.work_subdir }}/GameUserSettings.ini

      - name: Summarize result
        env:
          PRNUM: ${{ steps.cpr.outputs.pull-request-number }}
        run: |
          set -euo pipefail
          if [ "${{ steps.stage.outputs.changed }}" = "1" ]; then
            if [ -n "${PRNUM:-}" ]; then
              echo "### GUS changed → PR opened (#${PRNUM})" >> "$GITHUB_STEP_SUMMARY"
              echo "GUS changed → PR opened (#${PRNUM})"
            else
              echo "### GUS changed → PR opened" >> "$GITHUB_STEP_SUMMARY"
              echo "GUS changed → PR opened"
            fi
          else
            echo "### No GUS changes detected → no PR" >> "$GITHUB_STEP_SUMMARY"
            echo "No GUS changes detected → no PR"
          fi
