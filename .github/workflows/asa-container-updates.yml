name: ASA Cluster Compose Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'ASA/**/docker-compose.yaml'
  workflow_dispatch:

concurrency:
  group: asa-cluster-deploy
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write

env:
  WAIT_30M: "30"       # prod: 1800
  WAIT_15M: "30"       # prod: 900
  WAIT_3M:  "30"       # prod: 180

  LOG_READY_TIMEOUT:  "600"    # 10m
  RCON_READY_TIMEOUT: "1200"   # 20m

jobs:
  build-matrix:
    runs-on: self-hosted
    outputs:
      matrix: ${{ steps.mk-matrix.outputs.matrix }}

    steps:
      - name: Checkout (matrix build only)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Compute changed compose files (merge-safe)
        id: cf
        shell: bash
        run: |
          set -euo pipefail
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"

          if [ -z "${BEFORE}" ] || ! git cat-file -e "$BEFORE^{commit}" 2>/dev/null; then
            BEFORE="$(git rev-parse HEAD~1)"
          fi
          
          git --no-pager diff --name-only "$BEFORE" "$AFTER" -- 'ASA/**/docker-compose.yaml' > changed.txt || true
          echo "Changed compose files:"
          cat changed.txt || true

          {
            echo "list<<'EOF'"
            cat changed.txt
            echo "EOF"
          } >> "$GITHUB_OUTPUT"


      - name: Build matrix from deploy/targets.json
        id: mk-matrix
        uses: actions/github-script@v7
        env:
          CHANGED: ${{ steps.cf.outputs.list }}
        with:
          script: |
            const fs = require('fs');

            // Split newline list from previous step
            const changed = (process.env.CHANGED || '')
              .split('\n')
              .map(s => s.trim())
              .filter(Boolean);

            const manifest = JSON.parse(fs.readFileSync('deploy/targets.json','utf8'));

            // For compose-only deploys, include targets whose compose path changed
            const want = new Set(changed);
            const picks = [];

            for (const t of manifest.targets) {
              const composePath = `${t.work_subdir.replace(/\/+$/,'')}/docker-compose.yaml`;
              if (want.has(composePath)) picks.push(t);
            }

            // De-dupe by id
            const uniq = Object.values(Object.fromEntries(picks.map(t => [t.id, t])));

            core.info(`Changed compose files: ${changed.join(', ') || '(none)'}`);
            core.info(`Selected targets: ${uniq.map(t => t.id).join(', ') || '(none)'}`);
            core.setOutput('matrix', JSON.stringify(uniq));

  deploy:
    needs: build-matrix
    if: ${{ needs.build-matrix.outputs.matrix != '[]' }}
    runs-on: self-hosted

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.build-matrix.outputs.matrix) }}

    concurrency:
      group: asa-deploy-${{ matrix.ssh_host_secret }}
      cancel-in-progress: false

    env:
      SSH_USER: ${{ secrets.ASA_SERVER_SSH_USER }}
      SSH_PORT: ${{ secrets.ASA_SERVER_PORT }}
      HOST: ${{ secrets[matrix.ssh_host_secret] }}
      WORK_DIR: ${{ secrets.WORK_DIR }}

      REPO_SUBDIR: ${{ matrix.work_subdir }}
      CNAME: ${{ matrix.container }}
      LIVE_WIN_DIR: /var/lib/docker/volumes/${{ matrix.volume }}/_data/ShooterGame/Saved/Config/WindowsServer
      REPO_INI_DIR: ${{ github.workspace }}/${{ matrix.work_subdir }}
      LIVE_TMP: live-${{ matrix.id }}

    steps:
      - name: Mint GitHub App token
        id: app
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      # --- manual SSH agent (no action, no post-step) ---
      - name: Start ssh-agent & add key
        shell: bash
        run: |
          set -euo pipefail
          eval "$(ssh-agent -s)"
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> "$GITHUB_ENV"
          echo "SSH_AGENT_PID=$SSH_AGENT_PID" >> "$GITHUB_ENV"
          printf '%s\n' "${{ secrets.ASA_SERVERS_PRIVATE_KEY }}" | tr -d '\r' | ssh-add -
          ssh-add -l

      # --- manual checkout of repo into workspace (no action, no post-step) ---
      - name: Manual checkout (main)
        shell: bash
        run: |
          set -euo pipefail
          cd "$GITHUB_WORKSPACE"
          REPO_URL="https://x-access-token:${{ steps.app.outputs.token }}@github.com/${{ github.repository }}.git"
          if [ -d .git ]; then
            git remote set-url origin "$REPO_URL" || git remote add origin "$REPO_URL"
            git fetch --no-tags --prune origin main
            git checkout -B main origin/main
          else
            git clone --no-tags --single-branch --branch main "$REPO_URL" .
          fi
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      # --- Drain & stop ---
      - name: RCON 30m warning
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "sudo docker exec '$CNAME' asa-ctrl rcon --exec \"serverchat Server restarting in 30 minutes for updates. Get somewhere safe.\""

      - name: Wait 15m
        run: sleep ${{ env.WAIT_30M }}

      - name: RCON 15m warning
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "sudo docker exec '$CNAME' asa-ctrl rcon --exec \"serverchat Server restarting in 15 minutes for updates. Get somewhere safe.\""

      - name: Wait 12m
        run: sleep ${{ env.WAIT_15M }}

      - name: RCON 3m warning
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "sudo docker exec '$CNAME' asa-ctrl rcon --exec \"serverchat Server restarting in 3 minutes for updates. Final Warning get somewhere safe.\""

      - name: Wait 3m
        run: sleep ${{ env.WAIT_3M }}

      - name: Saveworld & shutdown announce
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "sudo docker exec '$CNAME' asa-ctrl rcon --exec \"serverchat Saving world and shutting down for updates.\" && \
             sudo docker exec '$CNAME' asa-ctrl rcon --exec \"saveworld\""

      - name: Stop container
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "cd '$WORK_DIR/$REPO_SUBDIR' && sudo docker compose down"

      # --- Update on-host checkout for that map (compose only) ---
      - name: Update host checkout to origin/main (compose changes)
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" << 'EOF'
          set -euo pipefail
          cd "${{ env.WORK_DIR }}/${{ env.REPO_SUBDIR }}"
          TOKEN='${{ steps.app.outputs.token }}'
          REPO_SLUG='${{ github.repository }}'
          REPO_URL="https://x-access-token:${TOKEN}@github.com/${REPO_SLUG}.git"
          GIT_TERMINAL_PROMPT=0 git fetch --no-tags --prune "$REPO_URL" main
          git reset --hard FETCH_HEAD
          EOF

      - name: Start container
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "cd '$WORK_DIR/$REPO_SUBDIR' && sudo docker compose up -d"

      # --- Readiness gates ---
      - name: Wait for startup log ("Starting the ARKâ€¦")
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" << 'EOF'
          set -euo pipefail
          CNAME='${{ env.CNAME }}'
          end=$((SECONDS+${{ env.LOG_READY_TIMEOUT }}))
          until sudo docker logs --tail 500 "$CNAME" 2>&1 | grep -q "Starting the ARK: Survival Ascended dedicated server"; do
            if [ $SECONDS -gt $end ]; then
              echo "Timed out waiting for startup log." >&2
              sudo docker logs "$CNAME" --tail 200 >&2 || true
              exit 1
            fi
            sleep 5
          done
          echo "Startup log observed."
          EOF

      - name: Wait for RCON to respond
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" << 'EOF'
          set -euo pipefail
          CNAME='${{ env.CNAME }}'
          end=$((SECONDS+${{ env.RCON_READY_TIMEOUT }}))
          while :; do
            if sudo docker exec "$CNAME" asa-ctrl rcon --exec "listplayers" >/dev/null 2>&1 \
               || sudo docker exec "$CNAME" asa-ctrl rcon --exec "serverchat healthcheck" >/dev/null 2>&1; then
              echo "RCON is responsive."
              break
            fi
            if [ $SECONDS -gt $end ]; then
              echo "Timed out waiting for RCON readiness." >&2
              sudo docker logs "$CNAME" --tail 200 >&2 || true
              exit 1
            fi
            sleep 5
          done
          EOF

      # --- Live -> repo PR (ONLY GameUserSettings.ini) ---
      - name: Fetch live GameUserSettings.ini (read-only mount)
        run: |
          mkdir -p "$LIVE_TMP"
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$HOST" \
            "sudo docker run --rm -v '${{ matrix.volume }}:/v:ro' alpine:3.19 \
             sh -c 'if [ -f /v/ShooterGame/Saved/Config/WindowsServer/GameUserSettings.ini ]; then cat /v/ShooterGame/Saved/Config/WindowsServer/GameUserSettings.ini; fi'" \
            > "$LIVE_TMP/GameUserSettings.ini" || true

      - name: Scrub admin password & normalize line endings
        run: |
          if [ -s "$LIVE_TMP/GameUserSettings.ini" ]; then
            # normalize CRLF to LF to avoid false diffs
            sed -i 's/\r$//' "$LIVE_TMP/GameUserSettings.ini"
            # scrub the admin password (never commit secrets)
            sed -i 's|^ServerAdminPassword=.*$|ServerAdminPassword=\${SERVER_PASSWORD}|' "$LIVE_TMP/GameUserSettings.ini"
          fi
          # also normalize the repo copy before diff
          if [ -f "$REPO_INI_DIR/GameUserSettings.ini" ]; then
            sed -i 's/\r$//' "$REPO_INI_DIR/GameUserSettings.ini"
          fi

      - name: Diff & stage GameUserSettings.ini
        id: stage
        run: |
          set -euo pipefail
          changed=0
          if [ -s "$LIVE_TMP/GameUserSettings.ini" ]; then
            if ! diff -q "$REPO_INI_DIR/GameUserSettings.ini" "$LIVE_TMP/GameUserSettings.ini" >/dev/null 2>&1; then
              cp "$LIVE_TMP/GameUserSettings.ini" "$REPO_INI_DIR/GameUserSettings.ini"
              echo "updated GameUserSettings.ini"
              changed=1
            fi
          fi
          echo "changed=$changed" >> "$GITHUB_OUTPUT"

      - name: Create PR with updated GameUserSettings.ini
        id: cpr
        if: steps.stage.outputs.changed == '1'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.app.outputs.token }}
          commit-message: "chore(${{ matrix.id }}): sync live GameUserSettings.ini -> repo"
          title: "Sync GameUserSettings.ini from live: ${{ matrix.id }}"
          body: |
            Syncing `GameUserSettings.ini` from the live server after restart.

            - Target: **${{ matrix.id }}**
            - Path: **${{ matrix.work_subdir }}/GameUserSettings.ini**
          branch: chore/sync-gus/${{ matrix.id }}-${{ github.run_id }}
          delete-branch: true
          add-paths: |
            ${{ matrix.work_subdir }}/GameUserSettings.ini

      - name: Summarize result
        if: always()
        run: |
          set -euo pipefail
          msg="No GUS changes detected â†’ no PR"
          if [ "${{ steps.stage.outputs.changed }}" = "1" ]; then
            prnum="${{ steps.cpr.outputs.pull-request-number }}"
            if [ -n "${prnum}" ]; then
              msg="GUS changed â†’ PR opened (#${prnum})"
            else
              msg="GUS changed â†’ PR opened"
            fi
          fi
          echo "$msg"
          if [ -n "${GITHUB_STEP_SUMMARY:-}" ]; then
            echo "### $msg" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Stop ssh-agent
        if: always()
        run: |
          if [ -n "${SSH_AGENT_PID:-}" ]; then ssh-agent -k || true; fi
